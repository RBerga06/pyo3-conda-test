name: Conda package

on: [push]

jobs:
  build:
    name: Build package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target-platform: linux-64
          # - os: ubuntu-24.04-arm
          #   target-platform: linux-aarch64
          # - os: windows-latest
          #   target-platform: win-64
          # - os: macos-13
          #   target-platform: osx-64
          # - os: macos-latest
          #   target-platform: osx-arm64
    steps:
    - uses: actions/checkout@v4
    - name: Build conda package
      uses: prefix-dev/rattler-build-action@v0.2.34
      with:
        recipe-path: ./recipe.yaml
        upload-artifact: true
        # needs to be unique for each matrix entry
        artifact-name: package-${{ matrix.target-platform }}
        build-args: --target-platform ${{ matrix.target-platform }}${{ matrix.target-platform == 'linux-aarch64' && ' --no-test' || '' }}

  test:
    name: Test package
    runs-on: ${{ matrix.os }}
    needs: [ build ]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target-platform: linux-64
          # - os: ubuntu-24.04-arm
          #   target-platform: linux-aarch64
          # - os: windows-latest
          #   target-platform: win-64
          # - os: macos-13
          #   target-platform: osx-64
          # - os: macos-latest
          #   target-platform: osx-arm64
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: package-${{ matrix.target-platform }}
        run-id: ${{ github.run_id }}
    - uses: prefix-dev/setup-pixi@v0.8.10
      with:
        pixi-version: latest
        run-install: false
    - name: Generate `pixi.toml`
      run: |
        mv pixi.toml.template pixi.toml
        echo "pyo3-conda-test = { path = '${{ matrix.target-platform }}/$(ls ${{ matrix.target-platform }})' }" &> pixi.toml
        cat pixi.toml
    - run: pixi install
    - run: pixi run pyo3-conda-test
